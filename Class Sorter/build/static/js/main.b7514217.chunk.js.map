{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","classList","mapping","Map","forEach","i","set","state","ret","this","classes","console","log","sort","a","b","rank","get","push","className","key","style","length","class1","Math","floor","random","class2","onClick","betterThan","c1","c2","forceUpdate","id","construct_question","construct_cards","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,qICoH5BC,G,8DA9Gd,WAAYC,GAAQ,IAAD,sBAClB,cAAMA,GACN,IAAIC,EAAY,CAAC,2BAChB,kBACA,6BACA,iBACA,iBACA,iCACA,4BACA,6BACA,kBACA,aACA,qBACA,iBACA,wBACA,WACA,UACA,2BACA,uBACA,kCACA,gBACA,iBACA,2BACA,gBACA,+BACA,+BACA,gCACA,mBACA,yBACA,iBAGGC,EAAU,IAAIC,IAhCA,OAkClBF,EAAUG,SAAQ,SAAAC,GACjBH,EAAQI,IAAID,EAAG,MAGhB,EAAKE,MAAQ,CACZ,KAAQL,EACR,QAAWD,GAxCM,E,8DA8CA,IAAD,OACbO,EAAM,GACNP,EAAS,YAAOQ,KAAKF,MAAMG,SAY/B,OAXAC,QAAQC,IAAIX,GACZA,EAAUY,MAAK,SAACC,EAAGC,GAClB,OAAO,EAAKR,MAAMS,KAAKC,IAAIF,GAAK,EAAKR,MAAMS,KAAKC,IAAIH,MAErDH,QAAQC,IAAIX,GACZA,EAAUG,SAAQ,SAAAC,GACjBG,EAAIU,KAAK,yBAAKC,UAAU,aAAaC,IAAKf,EACzCgB,MAAO,CAAC,SAAY,GAAGhB,EAAEiB,OAAS,GAAM,KACxC,mBAAmB,qBAAwB,EAAKf,MAAMS,KAAKC,IAAIZ,GAAK,GAAM,MACxEA,OAEGG,I,2CAWP,IARqB,IAAD,OAEhBA,EAAM,GAGNe,EAASd,KAAKF,MAAMG,QAAQc,KAAKC,MAAMD,KAAKE,SAAWjB,KAAKF,MAAMG,QAAQY,SAC1EK,EAASlB,KAAKF,MAAMG,QAAQc,KAAKC,MAAMD,KAAKE,SAAWjB,KAAKF,MAAMG,QAAQY,SAEvEK,IAAWJ,GACjBI,EAASlB,KAAKF,MAAMG,QAAQc,KAAKC,MAAMD,KAAKE,SAAWjB,KAAKF,MAAMG,QAAQY,SAS3E,OANAd,EAAIU,KAAK,yBAAKC,UAAU,eAAeC,IAAI,IAAIC,MAAO,CAAC,SAAY,GAAGE,EAAOD,OAAS,GAAM,MAC3FM,QAAS,WAAO,EAAKC,WAAWN,EAAQI,KACtCJ,IACHf,EAAIU,KAAK,yBAAKC,UAAU,eAAeC,IAAI,IAAIC,MAAO,CAAC,SAAY,GAAGE,EAAOD,OAAS,GAAM,MAC3FM,QAAS,WAAO,EAAKC,WAAWF,EAAQJ,KACtCI,IACInB,I,iCAGGsB,EAAIC,GACdtB,KAAKF,MAAMS,KAAKV,IAAIwB,EAAIrB,KAAKF,MAAMS,KAAKC,IAAIa,GAAMrB,KAAKF,MAAMS,KAAKC,IAAIc,IACtEtB,KAAKuB,gB,+BAIL,OACC,yBAAKC,GAAG,OACP,yBAAKA,GAAG,iBACP,0CACA,yBAAKA,GAAG,uBACNxB,KAAKyB,uBAIR,yBAAKD,GAAG,gBACNxB,KAAK0B,wB,GAtGOC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.b7514217.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tlet classList = [\"333\tSystems Programming\",\n\t\t\t\"421\tAlgorithms\",\n\t\t\t\"EE215\tSignal Conditioning\",\n\t\t\t\"341\tLanguages\",\n\t\t\t\"401\tCompilers\",\n\t\t\t\"402\tDomain Specific Languages\",\n\t\t\t\"403\tSoftware Engineering\",\n\t\t\t\"427\tComputational Biology\",\n\t\t\t\"431\tComplexity\",\n\t\t\t\"440\tHCI I\",\n\t\t\t\"442\tVisualization\",\n\t\t\t\"444\tDatabases\",\n\t\t\t\"446\tMachine Learning\",\n\t\t\t\"447\tNLP\",\n\t\t\t\"451\tOS\",\n\t\t\t\"452\tDistributed Systems\",\n\t\t\t\"455\tComputer Vision\",\n\t\t\t\"456\tStory Design for Animation\",\n\t\t\t\"457\tGraphics\",\n\t\t\t\"458\tAnimation\",\n\t\t\t\"459\tCharacter Animation\",\n\t\t\t\"461\tNetworks\",\n\t\t\t\"464\tAdv Topics in Animation\",\n\t\t\t\"469\tComputer Architecture I\",\n\t\t\t\"470\tComputer Architecture II\",\n\t\t\t\"474\tEmbedded SW\",\n\t\t\t\"478\tAutonomous Robots\",\n\t\t\t\"484\tSecurity\"]\n\n\n\t\tlet mapping = new Map();\n\n\t\tclassList.forEach(i => {\n\t\t\tmapping.set(i, 1);\n\t\t});\n\n\t\tthis.state = {\n\t\t\t\"rank\": mapping,\n\t\t\t\"classes\": classList\n\t\t};\n\n\t}\n\n\n\tconstruct_cards() {\n\t\tlet ret = [];\n\t\tlet classList = [...this.state.classes];\n\t\tconsole.log(classList);\n\t\tclassList.sort((a, b) => {\n\t\t\treturn this.state.rank.get(b) - this.state.rank.get(a);\n\t\t});\n\t\tconsole.log(classList);\n\t\tclassList.forEach(i => {\n\t\t\tret.push(<div className=\"class-card\" key={i} \n\t\t\t\tstyle={{\"fontSize\":(80/i.length + 15) + \"px\", \n\t\t\t\t\"background-color\":\"rgba(230, 230, 0, \" + (this.state.rank.get(i) / 20) + \")\"}}\n\t\t\t\t>{i}</div>);\n\t\t});\n\t\treturn ret;\n\t}\n\n\tconstruct_question() {\n\t\t// pick random \n\t\tlet ret = [];\n\t\tlet random_class = [];\n\n\t\tlet class1 = this.state.classes[Math.floor(Math.random() * this.state.classes.length)];\n\t\tlet class2 = this.state.classes[Math.floor(Math.random() * this.state.classes.length)];\n\n\t\twhile (class2 === class1) {\n\t\t\tclass2 = this.state.classes[Math.floor(Math.random() * this.state.classes.length)];\n\t\t}\n\n\t\tret.push(<div className=\"class-choice\" key=\"1\" style={{\"fontSize\":(80/class1.length + 25) + \"px\"}}\n\t\t\tonClick={() => {this.betterThan(class1, class2)}}\n\t\t\t>{class1}</div>);\n\t\tret.push(<div className=\"class-choice\" key=\"2\" style={{\"fontSize\":(80/class1.length + 25) + \"px\"}}\n\t\t\tonClick={() => {this.betterThan(class2, class1)}}\n\t\t\t>{class2}</div>);\n\t\treturn ret;\n\t}\n\n\tbetterThan(c1, c2) {\n\t\tthis.state.rank.set(c1, this.state.rank.get(c1) + this.state.rank.get(c2));\n\t\tthis.forceUpdate();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"App\">\n\t\t\t\t<div id=\"question-area\">\n\t\t\t\t\t<h4>Which one?</h4>\n\t\t\t\t\t<div id=\"question-area-class\">\n\t\t\t\t\t\t{this.construct_question()}\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"display-area\">\n\t\t\t\t\t{this.construct_cards()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}